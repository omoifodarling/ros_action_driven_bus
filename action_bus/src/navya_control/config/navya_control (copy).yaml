navya_bus:
  # Publish all joint states -----------------------------------
  joint_state_controller:
    type: joint_state_controller/JointStateController
    publish_rate: 50  
  
  # Position Controllers ---------------------------------------
  tyres_controller:
    type: velocity_controllers/JointGroupVelocityController
    joints: 
      - front_left_wheel_joint
      - front_right_wheel_joint
      - rear_left_wheel_joint
      - rear_right_wheel_joint
    pids: 
      - {p: 250.0, i: 0.01, d: 10.0}
      - {p: 250.0, i: 0.01, d: 10.0}
      - {p: 250.0, i: 0.01, d: 10.0}
      - {p: 250.0, i: 0.01, d: 10.0}
  steering_controller:
    type: velocity_controllers/JointGroupVelocityController
    joints: 
      - front_left_wheel_rim_joint
      - front_right_wheel_rim_joint
    pids: 
      - {p: 100.0, i: 0.01, d: 10.0}
      - {p: 100.0, i: 0.01, d: 10.0}
  l_door_controller:
    type: position_controllers/JointPositionController
    joint: left_door_joint
    pid: {p: 20.0, i: 0.01, d: 10.0}
  r_door_controller:
    type: position_controllers/JointPositionController
    joint: right_door_joint
    pid: {p: 20.0, i: 0.01, d: 10.0}
  l_door_anc_controller:
    type: effort_controllers/JointVelocityController
    joint: left_door_anchor_joint
    pid: {p: 20.0, i: 0.01, d: 10.0}
  r_door_anc_controller:
    type: effort_controllers/JointVelocityController
    joint: right_door_anchor_joint
    pid: {p: 20.0, i: 0.01, d: 10.0}
  bus_driver:
    type: diff_drive_controller/DiffDriveController
    publish_rate: 50
  
    left_wheel: ['front_left_wheel_joint', 'rear_left_wheel_joint']
    right_wheel: ['front_right_wheel_joint', 'rear_right_wheel_joint']
  
    wheel_separation: 0.44
  
    # Odometry covariances for the encoder output of the robot. These values should
    # be tuned to your robot's sample odometry data, but these values are a good place
    # to start
    pose_covariance_diagonal: [0.001, 0.001, 0.001, 0.001, 0.001, 0.03]
    twist_covariance_diagonal: [0.001, 0.001, 0.001, 0.001, 0.001, 0.03]
  
    # Top level frame (link) of the robot description
    base_frame_id: base_link
  
    # Velocity and acceleration limits for the robot
    linear:
      x:
        has_velocity_limits    : true
        max_velocity           : 0.2   # m/s
        has_acceleration_limits: true
        max_acceleration       : 0.6   # m/s^2
    angular:
      z:
        has_velocity_limits    : true
        max_velocity           : 2.0   # rad/s
        has_acceleration_limits: true
        max_acceleration       : 6.0   # rad/s^2
  

